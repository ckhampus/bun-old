<?php

require_once '/home/cristian/www/projects/bun/src/Bun/Cache.php';

/**
 * Test class for Cache.
 * Generated by PHPUnit on 2011-04-04 at 23:34:37.
 */
class CacheTest extends PHPUnit_Extensions_OutputTestCase
{
    /**
     * @var Cache
     */
    protected $object;

    protected static $dir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->lifetime = 2;
        $this->time = time();
        $this->expire = $this->time + $this->lifetime;
        
    }

    public static function setUpBeforeClass()
    {
        self::$dir = 'tests/cache';
        mkdir(self::$dir);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public static function tearDownAfterClass()
    {
        if (is_dir(self::$dir)) {
            $files = scandir(self::$dir);

            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                    unlink(self::$dir.'/'.$file);
                }
            }

            rmdir(self::$dir);
        }
    }

    /**
     * Test cache by caching current time. 
     */
    public function testCacheOne()
    {
        $cache = new Cache('test', $this->lifetime, 'tests/cache');
        
        $this->expectOutputString($this->time);
        if (!$cache->start()) {
            $this->time;            
            $cache->end();
        }
    }

    /**
     * Test if the time still is cached. 
     */
    public function testCacheTwo()
    {
        $cache = new Cache('test', $this->lifetime, 'tests/cache');
        
        $this->expectOutputString($this->time);
        if (!$cache->start()) {
            $this->time;            
            $cache->end();
        }

        sleep($this->lifetime);
    }

    /**
     * Test if cache has been cleared.
     */
    public function testCacheTree()
    {
        $cache = new Cache('test', $this->lifetime, 'tests/cache');
        
        $this->expectOutputString(time());
        if (!$cache->start()) {
            time();            
            $cache->end();
        }
    }

}
