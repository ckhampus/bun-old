<?php

require_once '/home/cristian/www/projects/bun/src/Bun/Cache.php';

/**
 * Test class for Cache.
 * Generated by PHPUnit on 2011-04-04 at 23:34:37.
 */
class CacheTest extends PHPUnit_Extensions_OutputTestCase
{
    /**
     * @var Cache
     */
    protected $object;

    protected static $dir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->lifetime = 30;
        $this->expire = $this->time + $this->lifetime;
        
    }

    public static function setUpBeforeClass()
    {
        self::$dir = 'tests/cache';
        mkdir(self::$dir);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //$c = new Cache('test', $this->lifetime, self::$dir);
        //$c->destroy();
    }

    public static function tearDownAfterClass()
    {
        if (is_dir(self::$dir)) {
            $files = scandir(self::$dir);

            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                    unlink(self::$dir.'/'.$file);
                }
            }

            rmdir(self::$dir);
        }
    }

    public function testIsCached()
    {
        $c = new Cache('test', $this->lifetime, self::$dir);
        
        // Returns false if there is no cache file.
        $this->assertFalse($c->start());
        $c->end();
     
        // Returns true if there is a cache file.
        $this->assertTrue($c->start());
        $this->assertTrue($c->destroy());
    }

    /**
     * Test cache by caching current time. 
     */
    public function testCacheOutput()
    {
        $c = new Cache('test', $this->lifetime, 'tests/cache');
        
        // Start output buffering
        ob_start();

        if (!$c->start()) {
            echo time();            
            $c->end();
        }

        // Stop output buffering
        $output = ob_get_clean();

        $this->assertEquals(time(), $output);

        sleep(2);
    }

    /**
     * Test the out that has been cached in the previous test.
     * 
     * @depends testCacheOutput
     */
    public function testCachedOutput()
    {
        $c = new Cache('test', $this->lifetime, 'tests/cache');
        
        // Start output buffering
        ob_start();

        $this->assertTrue($c->start());

        // Stop output buffering
        $output = ob_get_clean();

        $this->assertNotEquals((string)time(), $output);
    }

    /**
     * Tests if the cache can be destroyed.
     * 
     * @depends testCachedOutput
     */
    public function testDestroyCache()
    {
        $c = new Cache('test', $this->lifetime, 'tests/cache');
        $this->assertTrue($c->destroy());
        $this->assertFalse($c->destroy());
    }
}
