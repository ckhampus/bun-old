<?php
require_once('PHPUnit/Extensions/OutputTestCase.php');
require_once(__DIR__.'/../../src/Bun/Bun.php');

/**
 * Test class for Bun.
 * Generated by PHPUnit on 2011-04-04 at 17:06:24.
 */
class BunTest extends PHPUnit_Extensions_OutputTestCase
{
    /**
     * @var Bun
     */
    protected $bun;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (isset($GLOBALS['bun'])) {
            unset($GLOBALS['bun']);
        }

        $_SERVER = array(
            'HTTP_HOST' => 'subdomain.example.com',
            'HTTP_CONNECTION' => 'keep-alive',
            'HTTP_CACHE_CONTROL' => 'max-age=0',
            'HTTP_USER_AGENT' => 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.28 Safari/534.24',
            'HTTP_ACCEPT' => 'application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
            'HTTP_ACCEPT_ENCODING' => 'gzip,deflate,sdch',
            'HTTP_ACCEPT_LANGUAGE' => 'en-US,en;q=0.8,sv;q=0.6',
            'HTTP_ACCEPT_CHARSET' => 'ISO-8859-1,utf-8;q=0.7,*;q=0.3',
            'PATH' => '/usr/local/bin:/usr/bin:/bin',
            'SERVER_SIGNATURE' => '<address>Apache/2.2.16 (Ubuntu) Server at 192.168.0.194 Port 80</address> ',
            'SERVER_SOFTWARE' => 'Apache/2.2.16 (Ubuntu)',
            'SERVER_NAME' => 'localhost',
            'SERVER_ADDR' => '192.168.0.194',
            'SERVER_PORT' => '80',
            'REMOTE_ADDR' => '192.168.0.100',
            'DOCUMENT_ROOT' => '/home/user/www',
            'SERVER_ADMIN' => 'webmaster@example.com',
            'SCRIPT_FILENAME' => __DIR__.'index.php',
            'REMOTE_PORT' => '57576',
            'GATEWAY_INTERFACE' => 'CGI/1.1',
            'SERVER_PROTOCOL' => 'HTTP/1.1',
            'REQUEST_METHOD' => 'GET',
            'QUERY_STRING' => ' ',
            'REQUEST_URI' => '/bun/index.php/hello',
            'SCRIPT_NAME' => '/bun/index.php',
            'PATH_INFO' => '/hello',
            'PATH_TRANSLATED' => '/home/user/www/hello',
            'PHP_SELF' => '/bun/index.php/hello',
            'REQUEST_TIME' => time()
        );


        $this->bun = new Bun();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        unset($this->bun);
    }

    /**
     * @todo Implement testRoute().
     */
    public function testGetRoute()
    {
        $_SERVER['REQUEST_METHOD'] = 'GET';

        $this->assertTrue($this->bun->route('GET', '/hello', function() {}));
        $this->assertFalse($this->bun->route('POST', '/hello', function() {}));
        $this->assertFalse($this->bun->route('PUT', '/hello', function() {}));
        $this->assertFalse($this->bun->route('DELETE', '/hello', function() {}));
    }

    /**
     * @todo Implement testRoute().
     */
    public function testPostRoute()
    {    
        $_SERVER['REQUEST_METHOD'] = 'POST';

        $this->assertFalse($this->bun->route('GET', '/hello', function() {}));
        $this->assertTrue($this->bun->route('POST', '/hello', function() {}));
        $this->assertFalse($this->bun->route('PUT', '/hello', function() {}));
        $this->assertFalse($this->bun->route('DELETE', '/hello', function() {}));
    }

    /**
     * @todo Implement testRoute().
     */
    public function testPutRoute()
    {    
        $_SERVER['REQUEST_METHOD'] = 'PUT';

        $this->assertFalse($this->bun->route('GET', '/hello', function() {}));
        $this->assertFalse($this->bun->route('POST', '/hello', function() {}));
        $this->assertTrue($this->bun->route('PUT', '/hello', function() {}));
        $this->assertFalse($this->bun->route('DELETE', '/hello', function() {}));
    }

    /**
     * @todo Implement testRoute().
     */
    public function testDeleteRoute()
    {    
        $_SERVER['REQUEST_METHOD'] = 'DELETE';

        $this->assertFalse($this->bun->route('GET', '/hello', function() {}));
        $this->assertFalse($this->bun->route('POST', '/hello', function() {}));
        $this->assertFalse($this->bun->route('PUT', '/hello', function() {}));
        $this->assertTrue($this->bun->route('DELETE', '/hello', function() {}));
    }

    /**
     * @todo Implement testRender().
     */
    public function testPhpRendering()
    {
        // The data passed to the output function.
        $data = array(
            'heading' => 'Hello, World!'
        );

        // The expected output of the render function.
        $output_with_data = array('tag' => 'h1', 'content' => $data['heading']);
        $output_without_data = array('tag' => 'h1');

                
        $this->assertTag($output_with_data, $this->bun->render('php', __DIR__.'/../template.php', $data));
        $this->assertTag($output_without_data, $this->bun->render('php', __DIR__.'/../template.php'));
        $this->assertNotTag($output_with_data, $this->bun->render('php', __DIR__.'/../template.php'));
    }   

    /**
     * @todo Implement testRender().
     */
    public function testMustacheRendering()
    {
        // The data passed to the output function.
        $data = array(
            'heading' => 'Hello, World!'
        );

        // The expected output of the render function.
        $output_with_data = array('tag' => 'h1', 'content' => $data['heading']);
        $output_without_data = array('tag' => 'h1');

                
        $this->assertTag($output_with_data, $this->bun->render('mustache', __DIR__.'/../template.html', $data));
        $this->assertTag($output_without_data, $this->bun->render('mustache', __DIR__.'/../template.html'));
        $this->assertNotTag($output_with_data, $this->bun->render('mustache', __DIR__.'/../template.html'));
    }   

}
